; sector 0 is the boot sector. Last 3 words are magic, 6 bytes 'moonfs' to identify the FS.
; sector 1 is the volume bitmap: an inode header with inode_type_superblock 
;	and a data area containing one bit per sector on the media, set if used, clear if not.
;	More significant bits in a byte refer to earlier sectors. The first three bits are always set, natch.
; sector 2 is the root directory inode, see below.

Inodes look like this:
; 4 words magic. This is the characters 'luna', 0xfe, (inode_type), 'in' in that order.
;	(ascii to easily pick out in a hexdump. Large magic to make it easier to create data recovery tools. 
; 	Nonprintable character that isn't 0, 1 or -1 in the middle of string 
;	to reduce frequency of things that look like inodes to data recovery tools but aren't.
; 1 word flags (is this a file, directory, or something else? - symlink/device if your OS supports them? Is the inode simple - does the inode data area actually contain this entity's content - or is it a list of starting sector / size pairs describing where the content is?)
; 2 words total size of entity data in words
; 1 word reference count (so we can have hard links and not delete the target until all the referents have gone)
; 1 word parent inode (self for root)
; 3 words reserved.

def inode_magic				0
def inode_entity_flags		4
def inode_entity_size_high	5
def inode_entity_size_low	6
def inode_refcount			7
def inode_parent			8
def inode_reserved_area		9

def inode_header_size		12

; This 12-word header is immediately followed by the data area. 
; The content of the data area depends on the inode type (5th byte of the magic).
def inode_type_mask		((1<<3)-1)
def inode_type_free			0			; unused
def inode_type_file			1
def inode_type_directory	2
def inode_type_superblock	7
def inode_flag_simple	(1<<4)

; For inode_type_file, if inode_flag_simple is present, the file contents is entirely within the data area 
; (therefore the file size is less than or equal to (sector_size - inode_header_size) ).
; otherwise, the data area is a flat table of sector offsets 
; therefore, the maximum file size is (sector_size_words - inode_header_size) * sector_size_bytes; 
; for a 512-word-sector floppy, that's half a megabyte. If support for larger files is desired, a format will be introduced where
; the words in the data area refer to further inodes (of a new inode_type_extent), rather than to file data directly.

; For inode_type_directory, if inode_flag_simple is present, the data area contains 10-word directory records (see below).
; Support for absence of inode_flag_simple is not currently provided, limiting directories to containing 50 entries 
; (including the standard . and ..), but may trivially be added

; To open a file: for a given filename, xor all the characters together, then take that value modulo the maximum number of 
; directory records (determined by sector size) to be the index of the first directory record the file can occur. 
; Search forwards until either the directory record is located or an empty record is encountered.

; directory entry structure
def direntry_cname			0	; filename, two chars per word
def direntry_inode			7	; inode for this entry
def direntry_cached_flags	8	; type is immutable so should be safe, other bits might be out of date
def direntry_next			9	; next used direntry, for directory traversal

def direntry_structure_size	10