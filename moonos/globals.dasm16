; ------------------
; public API
; ------------------
; NB. Unless otherwise documented, kernel functions may trash any registers except SP (this includes TaskSwitch).
; Kernel functions may push up to eight words of data to process stack.

def Exit			    0x00	; exit current process
def Fork			    0x02	; spawn a new process
def ReadChar		    0x04	; line input to be written in terms of this, its code held in the process that uses it
def Print				0x06	; writes to the process's screen area, if any, respecting control codes and boundaries
def Reserved			0x08	; provisionally block device read
def Reserved			0x0A	; provisionally block device write
def Reserved			0x0C	; provisionally extensions (function code in A)
def Reserved			0x0E	; provisionally device enumeration, mapping

def CurrentProcess		0x1e	; contents of this location always points to current process's process table
def TaskSwitch			0x1f	; call this regularly

; ------------------
; process table format
; ------------------
def kerntable_next    		0
def kerntable_prev      	1
def kerntable_block_start	2
def kerntable_saved_sp     	3
def kerntable_screen_area	4
def kerntable_size			(kerntable_screen_area+1)

; ------------------
; screen area descriptor format
; ------------------
def screenarea_cursor_offset	0		; first word holds the address characters will next be written to
def screenarea_line_offset		1		; address of start of current line
def screenarea_topleft_offset	2		; address of top left of printable area
def screenarea_width			3		; width, in words, of printable area
def screenarea_pitch			4		; distance in words to same column on next displayed row
def screenarea_height			5		; height, in columns, of printable area
def screenarea_flags			6		; flags to control printable area behaviour
def screenarea_descriptor_size  (screenarea_flags+1)

; screenarea_scroll_behaviour (screenarea_flags bits 0..1). Controls behaviour when printing off the bottom screenarea row.
def screenarea_scroll_behaviour_hide	(0)		; silently drop characters
def screenarea_scroll_behaviour_scroll	(1)		; screen area scrolls up, first line lost
def screenarea_scroll_behaviour_wrap	(2)		; cursor wraps back to the top of screen area, printing continues from there

; ------------------
; Memory-mapped HW
; ------------------
def hw_vram      0x8000
def hw_chars     0x8180
def hw_vram_end  0x8200

def hw_keyboard       0x9000
def hw_keyboard_end   0x9010

def hw_end  0xA000


; blocks of memory are defined as [ptr+kerntable_block_start] .. (ptr+kerntable_size)
; for process tables, kerntable_saved_sp holds the stack pointer 
; and when a process is not executing, the top of its stack holds its next pc
; for free blocks, kerntable_saved_sp is unused and undefined
; a process's stack base is the start of its process table

; ------------------
; Entrypoint area implementation
; ------------------
.org 0
  set pc, init ; exit_impl
  set pc, fork_impl
  set pc, readch_impl
  set pc, print_impl
  set pc, _crash      ; 0x08
  set pc, _crash      ; 0x0A
  set pc, _crash      ; 0x0C
  set pc, _crash      ; 0x0E

.org CurrentProcess
proclist:
	dat initproc_table	; current process table address
   		
; ----- TaskSwitch (0x1f)
; ----- Assumes return address on stack. Preserves sp, nothing else
.org TaskSwitch
taskswitch_impl:
	set b,	 proclist					; current process table address held here
	set a,   [b]						; fetch it
	set [a+kerntable_saved_sp], sp		; store sp there
	set a,   [a]						; get next process table
	set [b], a							; store it
	set sp,  [a+kerntable_saved_sp]		; fetch sp
	set pc,  pop		                ; resume process
