; ------------------
; shell
; ------------------
def SHELL_COLOUR    0x9000
def CURSOR_MASK     0x9900

shell_identifier:
	dat "shell", 0

shell_greeting:
	dat "MoonOS 0.1 -- Luna City 1985", 0
  
shell_prompt_char: 
	dat (0x24 | SHELL_COLOUR)

; ---- entrypoint
shellproc_entry:
	set x, [proclist]								; our process handle
	set x, [x+kerntable_block_start]				; our header block
	set [x+kernheader_identifier], shell_identifier	; set the process identifier
	
	; allocate a terminal for this shell
	set a, 0			; no particular requirements
	jsr term_alloc

	; populate screen
	set i, shell_greeting    					; message data
	set j, [proclist]							; current process
	set j, [j+kerntable_block_start]			; its header	
	set j, [j+kernheader_terminal_handle] 		; its terminal descriptor
	set j, [j+term_vram]						; VRAM start
	set x, j									; grab a copy
	add x, (SCREEN_COLUMNS * (STATUS_ROW-1))	; end of usable area
	set c, 0x2000								; colour
	jsr strcpy             						; copy text
1:
	sti [j], 0	; clear screen
	ifn j, x	; end of line?
		b 1b	; loop
												
												; input is displayed on row above status line
	set x, [proclist]							; current process
	set x, [x+kerntable_block_start]			; its header	
	set x, [x+kernheader_terminal_handle] 		; its terminal descriptor
	set x, [x+term_vram]						; start of VRAM
	add x, (SCREEN_COLUMNS * (STATUS_ROW-1))	; line entry will always be here

												; locate our line buffer immediately after the process header
	set y, [proclist]							; current process
	set y, [y+kerntable_block_start]			; its header
	add y, kernheader_size						; the header's size is the start of the line buffer

	set push, x									; store those
	set push, y	
	def shell_input_line_vram 	1
	def shell_input_line_buffer 0

; ---- shell now initialised; this is the main loop
shellproc_mainloop: 
	set x, [sp+shell_input_line_vram]			; address of input line in VRAM
	set [x], [shell_prompt_char]				; prompt
	add x, 1
  
	set y, [sp+shell_input_line_buffer]			; start of line buffer
	set z, y									; also end of used area
	set i, y									; initial cursor posn
	set j, y									; calculate end of usable area
	add j, ((SCREEN_COLUMNS-1)-1)				; last usable word (allowing for prompt character)
		  
	jsr term_readline		; get a line of input
	
	; y..z is result
	set x, y			; need that in x..y
	set y, z
	set c, 0x7000		; turn it grey, print and scroll up
	jsr term_println

	; null terminate the whole string
	set [y], 0

	set z, shellproc_verb_list		; built-in verbs
	jsr shellproc_findverb			; check 'em
	ifn z, 0						; found one?
		set pc, shellproc_mainloop	; then we're done

	; no match found
	set x, shellproc_no_verb_match_message
	set y, shellproc_no_verb_match_message_len ; see below
	set c, 0x4000
	jsr term_println
	set pc, shellproc_mainloop
	
; ---- check verb list in z against string in x..y
; ---- list has entries of the form next, handler, null-terminated-string
; ---- calls matching handler. on return, z is 1 if one was found, 0 otherwise
shellproc_findverb:
	; find matching verb
1:
	set z, [z]			; next verb
	ife z, 0			; out of verbs?
		set pc, pop		; bail
		
	set i, z			; verb data
	add i, 2			; string is two words in
	set j, x			; what the user typed
	jsr strcmp			; compare those
	ife a, 0			; not a match?
		b 1b			; go around
	jsr [z+1]			; call handler
	set z, 1			; signal success	
	set pc, pop			; return
	
	
shellproc_no_verb_match_message:		dat "command not found"	
shellproc_no_verb_match_message_len:	dat shellproc_no_verb_match_message_len - shellproc_no_verb_match_message

hello_message:		dat "hello world"
hello_message_end:

; ---- builtins
shellproc_verb_list:
	dat 1f	

; -- ps
1:  dat 1f, 2f, "ps", 0
2:  set z, [proclist]
	
	set x, 4f
	set y, 4f + 32
	set c, 0x7000
	jsr term_println
	
	set x, [sp+shell_input_line_buffer+2]
			
3:	
	set c, 0
	set b, x
	set a, z
	jsr format_hex
	set [b+4], ':'
	set [b+5], 0x20	
	add b, 6
	
	set a, z
	sub a, [z+kerntable_block_start]	
	jsr format_hex
	set [b+4], 0x20
	add b, 5
	
	set [b+0], '-'
	set [b+1], '-'
	set [b+2], '-'
	set [b+3], '-'
	set [b+4], 0x20
	add b, 5
	
	set i, [z+kerntable_block_start]
	set i, [i+kernheader_identifier]
	ife i, 0
		set i, 5f
	set j, b
	jsr strcpy
	set y, j
	set c, 0x7000
	jsr term_println
	set push, z
	jsr TaskSwitch
	set z, pop
	set z, [z]
	ifn z, [proclist]
		set pc, 3b
	set pc, pop		

		;0123456789abcdef0123456789abcdef
4:	dat "proc  size ---- identifier      ";
5:  dat "<???>", 0

; -- freelist
1:  dat 1f, 2f, "freelist", 0
2:  set z, freelist
	
	set x, 4f
	set y, 4f + 32
	set c, 0x7000
	jsr term_println
	
	set x, [sp+shell_input_line_buffer+2]
			
3:	
	set c, 0
	set b, x
	set a, z
	jsr format_hex
	set [b+4], ':'
	set [b+5], 0x20	
	add b, 6
	
	set a, [z+kerntable_next]
	jsr format_hex
	set [b+4], 0x20
	add b, 5
	
	set a, [z+kerntable_prev]
	jsr format_hex
	set [b+4], 0x20
	set [b+5], 0x20
	add b, 6
	
	set a, z
	sub a, [z+kerntable_block_start]	
	jsr format_hex
	set [b+4], 0x20
	add b, 5
	
	set a, [z+kerntable_block_start]
	jsr format_hex
	set [b+4], 0x20
	add b, 5

	set a, z
	add a, kerntable_size
	jsr format_hex
	set [b+4], 0x20
	add b, 5
			
	set y, b
	set c, 0x7000
	jsr term_println
	set push, z
	jsr TaskSwitch
	set z, pop
	set z, [z]
	ifn z, freelist
		set pc, 3b
	set pc, pop		

		;0123456789abcdef0123456789abcdef
4:	dat "block next prev  size start eob ";

; -- exit
1:  dat 1f, 2f, "exit", 0
2:  set pc, Exit

; -- hello
1:  dat 0, 2f, "hello", 0
2:	set x, hello_message
	set y, hello_message_end
	set c, 0x2C80
	jsr term_println
	set x, 0x240
  	set push, [proclist]			; push current process handle
  	jsr Fork						; create a process
  	ife [proclist], pop				; are we the original process?    		
		set pc, pop
		
	; FDD test
	; attempt to read the first sector, and dump the first 32 bytes to system log
	set a, 0
	set b, 1
	set c, [proclist]
	set c, [c+kerntable_block_start]
	add c, kernheader_size
	set push, c
	set x, 0
	jsr fdd_read_impl
	set c, 0
	set b, 3f
	jsr format_hex
	set b, 2f
	set c, 4f
	ifn a, 0
		b 1f
	set b, pop
	set c, b
	add c, 16
	set i, c
	set j, c
	add j, 15
9:
	set a, [i-1]
	set [j], a
	and [j], 0x7f
	shr a, 8
	and a, 0x7F
	sub j, 1
	std [j], a
	ifg i, b
		b 9b
	add c, 16
1:
	set a, logger_identifier
	jsr rpccall_impl		
	set pc, Exit

2:  dat "Failed to read sector (error "
3:  dat "0000)"
4:  