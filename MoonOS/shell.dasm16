; ------------------
; shell
; ------------------
def SHELL_COLOUR    0x9000
def CURSOR_MASK     0x9900

shell_identifier:
	dat "shell", 0

shell_greeting:
	dat ~"MoonOS 0.1\nLuna City 1985\n", 0 
  
shell_prompt_char: 
	dat (0x24 | SHELL_COLOUR)

; ---- entrypoint
shellproc_entry:
	set x, [proclist]								; our process handle
	set x, [x+kerntable_block_start]				; our header block
	set [x+kernheader_identifier], shell_identifier	; set the process identifier
	
	; allocate a terminal for this shell
	set a, 0										; no particular requirements
	jsr term_alloc

	set x, shell_greeting
	set c, 0x2000									; colour
	jsr term_printf									; populate screen		
													; input is displayed on row above status line
	set z, [proclist]								; current process
	set z, [z+kerntable_block_start]				; its header	
	set z, [z+kernheader_terminal_handle] 			; its terminal descriptor

													; locate our line buffer immediately after the process header
	set y, [proclist]								; current process
	set y, [y+kerntable_block_start]				; its header
	add y, kernheader_size							; the header's size is the start of the line buffer

	set push, z										; store those
	set push, y	
	def shell_input_line_termdesc	1
	def shell_input_line_buffer		0

; ---- shell now initialised; this is the main loop
shellproc_mainloop: 
	set x, [sp+shell_input_line_termdesc]		; term descriptor
	set x, [x+term_vram_curr]					; start of VRAM
	add x, (SCREEN_COLUMNS * (STATUS_ROW-1))	; address of input line in VRAM
	set [x], [shell_prompt_char]				; prompt
	add x, 1
  
	set y, [sp+shell_input_line_buffer]			; start of line buffer
	set z, y									; also end of used area
	set i, y									; initial cursor posn
	set j, y									; calculate end of usable area
	add j, ((SCREEN_COLUMNS-1)-1)				; last usable word (allowing for prompt character)
		  
	jsr term_readline		; get a line of input
	
	jsr term_sol			; cursor back to start of line
	
	; y..z is result
	set x, y			; need that in x..y
	set y, z
	set c, 0x7000		; turn it grey, print and go to next line
	jsr term_println

	; null terminate the whole string
	set [y], 0

	set z, shellproc_verb_list		; built-in verbs
	jsr shellproc_findverb			; check 'em
	ifn z, 0						; found one?
		set pc, shellproc_mainloop	; then we're done

	; no match found
	set x, shellproc_no_verb_match_message
	set c, 0x4000
	jsr term_printf
	set pc, shellproc_mainloop
	
; ---- check verb list in z against string in x..y
; ---- list has entries of the form next, handler, null-terminated-string
; ---- calls matching handler. on return, z is 1 if one was found, 0 otherwise
shellproc_findverb:
	; find matching verb
1:
	set z, [z]			; next verb
	ife z, 0			; out of verbs?
		set pc, pop		; bail
		
	set a, z			; verb data
	add a, 2			; string is two words in
	set i, x			; what the user typed
	jsr strcmp_ia		; compare those
	ifn a, 0			; not a match?
		b 1b			; go around
	jsr [z+1]			; call handler
	set z, 1			; signal success	
	set pc, pop			; return
	
	
shellproc_no_verb_match_message:		dat ~"command not found\n", 0

; ---- builtins
shellproc_verb_list:
	dat 1f	

; -- ps
1:  dat 1f, 2f, ~"ps", 0
2:  set z, [proclist]

	set x, 4f
	set c, 0x7000
	jsr term_printf

3:
	set x, 6f	
	set a, [z+kerntable_block_start]
	set a, [a+kernheader_identifier]
	ife a, 0
		set a, 5f
	set push, a
	set a, z
	sub a, [z+kerntable_block_start]	
	set push, a
	set push, z
	jsr term_printf
	add sp, 3
	
	set z, [z]
	ifn z, [proclist]
		set pc, 3b
	set pc, pop		

4:	dat ~"proc  size ---- identifier\n", 0;
5:  dat "<???>", 0
6:	dat ~"%x %x ---- %s\n", 0

; -- freelist
1:  dat 1f, 2f, ~"freelist", 0
2:  set z, freelist
	
	set x, 4f
	set c, 0x7000
	jsr term_printf	

3:
	set a, z
	add a, kerntable_size
	set push, a
	set push, [z+kerntable_block_start]
	set a, z
	sub a, [z+kerntable_block_start]
	set push, a
	set push, [z+kerntable_prev]
	set push, [z+kerntable_next]
	set push, z	
	
	set x, 5f
	jsr term_printf
	add sp, 6
	
	set z, [z+kerntable_next]
	ifn z, freelist
		set pc, 3b
	set pc, pop		

         ;0123456789abcdef0123456789abcdef
4:	dat ~"block next prev  size start eob\n", 0;
5:	dat ~"%x: %x %x  %x %x  %x\n", 0;

; -- exit
1:  dat 0, 2f, ~"exit", 0
2:  set pc, Exit
