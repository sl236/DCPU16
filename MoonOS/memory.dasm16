; ----- malloc
; ----- allocate X words of memory; returns block table ptr in X
def min_block_size 0x80
malloc:
  set push, a
  set push, b
  set push, c
  set push, z
  set A, freelist         ; freelist head

1:
  set A, [A + kerntable_prev] 	; prev block (allocations happen from top of memory, so this makes us walk more of the fragments)
  ife A, freelist         		; if we're back at the head
    set pc, out_of_memory 		; then not much we can do
  set B, A                ; grab a copy
  sub B, [A + kerntable_block_start]  ; work out how big the block is
  ifg X, B                ; if we need more memory
    b 1b                  ; go around
        
  set C, B                ; we know B>=X
  sub C, X                ; so this is always >=0
  set B, A                ; block start
  sub B, X                ; new process wants to start here    
  ifg min_block_size, C   ; block too small to split?
    b 1f                  ; give the caller the whole thing

  set C, B                      ; new block start
  sub C, kerntable_size         ; new free block can live here
  set [C], A													; block detached: its next points to the old block
  set Z, [A+kerntable_prev]										; (fetch old block's prev)
  set [C+kerntable_prev], Z										; and its prev to the old block's prev
  set [A+kerntable_prev], C										; the old block's prev points to the new block
  set [Z], C													; as does the old block's prev's next
  set [C+kerntable_block_start], [A+kerntable_block_start]		; the new block starts where the old block used to
  set [A+kerntable_block_start], B								; and that starts where the new one ends
  sub [freemem_size], kerntable_size							; we created a new descriptor
  
1:
  ; whatever happened, A currently holds a suitable block
  ; that block is still in the freelist right now so let's detach it
  set X, [A+kerntable_block_start]	; start
  sub X, A					; negative size
  add [freemem_size], X		; add to running free memory total
  set X, A            		; copy block handle to X
  jsr dll_delete      		; remove it from the freelist
  set z, pop
  set c, pop
  set b, pop
  set a, pop
  set pc, pop		  ; return

; ----- Free
; ----- Release memory described by X back to the system. X is trashed.
free:
  set push, a
  set push, b
  set push, c
  set push, y
  
  set a, x							; end
  sub a, [x+kerntable_block_start]	; size
  add [freemem_size], a				; add to running free memory total
  
  set y, freelist     ; head of freelist
1:
  set y, [y]          ; next free block
  ife y, freelist     ; have we come back to the start?
    b 1f              ; then X should be last in the list; bail
  ifg x, y            ; if's still before X
    b 1b              ; keep looking
1:  
  jsr dll_splice      ; insert x just before y; returns y's prev in a
    
  ; if prev+kerntable_size == x's start, we should coalesce them
  ; likewise if x+kerntable_size == y, we should coalesce those
  
  set c, x                	; take a copy of x
  set b, a                	; copy a
  add b, kerntable_size   	; add kerntable_size
  ifn b, [x+kerntable_block_start] 	; if it's not equal to x
    b 1f                  			; don't coalesce
  
  set [x+kerntable_block_start], [a+kerntable_block_start]  ; the new block starts where a used to
  set x, a                ; now we can remove a from the freelist
  jsr dll_delete          ; so do that
  add [freemem_size], kerntable_size	; we freed a block descriptor
  set x, c                ; put x back for next operation
    
1:
  add c, kerntable_size				; c still holds a copy of x
  ifn c, [y+kerntable_block_start]	; if that's not where y starts
    b 1f							; don't coalesce
  
  set [y+kerntable_block_start], [x+kerntable_block_start]	; Y now starts where X used to
  jsr dll_delete											; and we can remove x from the list
  add [freemem_size], kerntable_size						; we freed a block descriptor
1:    

  set y, pop
  set c, pop
  set b, pop
  set a, pop
  set pc, pop


