; ------------------
; terminal handling
; ------------------

term_return_popxy:
	set x, pop
	set y, pop
	set pc, pop

; rotate left through VTs, preserving registers
term_rotate_left:
	set push, y
	set push, x
	set x, [screen_curr_terminal]			; current terminal
	ife x, 0								; not got one?
	  set pc, term_return_popxy				; then we're done
	set y, [x+term_block_handle]			; the block handle
	set y, [y+kerntable_prev]				; previous terminal's block handle
	set y, [y+kerntable_block_start]		; its term structure
	ife y, x								; is there only one terminal?
	  set pc, term_return_popxy				; then we're done
	set [screen_curr_terminal], y			; this'll be the new terminal	
	set x, pop
	set y, pop
	set pc, term_map_current				; map it

; rotate right through VTs, preserving registers
term_rotate_right:
	set push, y
	set push, x
	set x, [screen_curr_terminal]			; current terminal
	ife x, 0								; not got one?
	  set pc, term_return_popxy				; then we're done
	set y, [x+term_block_handle]			; the block handle
	set y, [y+kerntable_next]				; previous terminal's block handle
	set y, [y+kerntable_block_start]		; its term structure
	ife y, x								; is there only one terminal?
	  set pc, term_return_popxy				; then we're done
	set [screen_curr_terminal], y			; this'll be the new terminal
	set x, pop
	set y, pop
	set pc, term_map_current				; map it
		
; map the current VT to hardware, preserving registers
term_map_current:
	set push, x
	set push, a
	set push, b
	set x, [screen_curr_terminal]			; current terminal
	set a, LEM1802_MEM_MAP_SCREEN
	set b, [x+term_vram_curr]
	hwi [screen_device_id]
	set a, LEM1802_MEM_MAP_FONT
	set b, [x+term_charmap]
	ifn [screen_compatibility], 0
		ife b, 0
			set b, 0x8180
	hwi [screen_device_id]
	set a, LEM1802_MEM_MAP_PALETTE
	set b, [x+term_palette]
	hwi [screen_device_id]
	set a, LEM1802_SET_BORDER_COLOUR
	set b, [x+term_border_colour]
	hwi [screen_device_id]
	set b, pop
	set a, pop
	set x, pop
	set pc, pop

; Release the current process's terminal, trashing registers
; hardware will display another VT or turn off as appropriate if necessary
term_release:
	set x, [proclist]						; current process
	set x, [x+kerntable_block_start]		; its header
	set y, [x+kernheader_terminal_handle]	; its terminal
	ife y, 0								; don't have one?
		set pc, pop							; then we're done
	
	set [x+kernheader_terminal_handle], 0	; won't have one after we're done
	ife y, [screen_curr_terminal]			; is it being displayed?
		jsr term_rotate_left				; not any more...
	set a, LEM1802_MEM_MAP_SCREEN			; prepare to turn it off
	set b, 0
	ifn y, [screen_curr_terminal]			; and if the rotation failed, do so
		b 1f
	
	hwi [screen_device_id]
	set [screen_curr_terminal], 0

1:	
	set x, [y+term_block_handle]			; get the memory block handle
	jsr dll_delete							; remove it from the terminal list
	set pc, kfree							; release it, then we're done

; Allocate a terminal for the current process. Trashes registers.
; Any existing terminal is released. Then VRAM is allocated.
; The A register is also examined, and charmap and palette are allocated 
; if the appropriate term_alloc_flags are set
; The new terminal is mapped to the screen.
term_alloc:	
	set push, a							; need the argument preserved
	jsr term_release					; release current terminal, if any
	set z, pop							; get flags back
	
	set x, ((SCREEN_ROWS+1)*SCREEN_COLUMNS) + term_desc_size	; vram and descriptor. Allow an extra row's worth of memory, to let us row-align VRAM start
	ifb z, term_alloc_flag_charmap
		add x, 0x100
	ifb z, term_alloc_flag_palette
		add x, 0x10
	jsr kmalloc							; allocate memory for these
	
	set i, [x+kerntable_block_start]	; new terminal descriptor
	set b, i							; calculate vram start
	add b, term_desc_size				; it's after the descriptor
	add b, (SCREEN_COLUMNS-1)			; and row-aligned
	and b, ~(SCREEN_COLUMNS-1)	
	sti [i], b							; store it
1:
	sti [i], 0							; most terminal descriptor entries start as zero
	ifn i, b
		b 1b
	set i, [x+kerntable_block_start]	; get terminal descriptor handle back
	set [i+term_owner], [proclist]		; fill the entries we can
	set [i+term_block_handle], x
	set [i+term_cursor_ptr], [i+term_vram_curr]
	
	add b, (SCREEN_ROWS*SCREEN_COLUMNS)	; end of VRAM
	ifc z, term_alloc_flag_charmap		; if we got a charmap and/or palette, calculate those addresses
		set pc, 1f						; otherwise skip over the calculations
	set [i+term_charmap], b
	set a, LEM1802_MEM_DUMP_FONT
	hwi [screen_device_id]
	add c, 0x100
1:
	ifc z, term_alloc_flag_palette	
		set pc, 1f
	set a, LEM1802_MEM_DUMP_PALETTE
	hwi [screen_device_id]
	set [i+term_palette], b
1:	
	set y, [screen_curr_terminal]		; current terminal
	ife y, 0							; if we don't have one, skip splicing
		set pc, 1f
	set y, [y+term_block_handle]		; its block handle
	jsr dll_splice						; insert us just before
1:
	set x, [x+kerntable_block_start]	; terminal descriptor
	set [screen_curr_terminal], x		; we become the current terminal	
	set x, [proclist]											; current process
	set x, [x+kerntable_block_start]							; its header
	set [x+kernheader_terminal_handle], [screen_curr_terminal]	; it owns this terminal
	jsr term_clear						; clear VRAM
	jsr term_map_current				; map us
	set x, idleproc_table				; idle process handle
	set pc, taskswitch_to_process		; taskswitch over so it can populate the status line; on resume return to caller

; ---- get current terminal descriptor in x
term_get_term_desc_x:
	set x, [proclist]							; current process
	set x, [x+kerntable_block_start]			; its header	
	set x, [x+kernheader_terminal_handle] 		; its terminal descriptor
	set pc, pop

; --- scroll terminal one line up; assumes terminal handle in x, trashes i, j
term_scroll_impl:
	set push, x
	set i, [x+term_vram_curr]					; start of current VRAM window
		
	set j, SCREEN_COLUMNS
	add j, i				               		; next row down
	
	set x, i
	add x, (SCREEN_COLUMNS * (STATUS_ROW-1))	; end of scroll area

1:
	sti [i], [j]
	sti [i], [j]
	sti [i], [j]
	sti [i], [j]
	sti [i], [j]
	sti [i], [j]
	sti [i], [j]
	sti [i], [j]
	ifn i, x      ; end of area?
		b 1b        ; no, go around
	set x, pop
	set [x+term_cursor_ptr], i					; new data can be written here
	set pc, pop
		
; ---- clear: clears the screen
term_clear:
	set push, i
	set push, j
	set push, x
	jsr term_get_term_desc_x
	set i, [x+term_vram_curr]					; start of VRAM
	set [x+term_cursor_ptr], i					; cursor will end up at start of VRAM
	set x, i
	add x, STATUS_ROW * SCREEN_COLUMNS			; not including status row

1:
	sti [i], 0
	sti [i], 0
	sti [i], 0
	sti [i], 0
	sti [i], 0
	sti [i], 0
	sti [i], 0
	sti [i], 0
	ifn i, x
		b 1b
	set x, pop
	set j, pop
	set i, pop
	set pc, pop
	
; ---- home: moves cursor to start of VRAM
term_home:
	set push, i
	set push, x
	jsr term_get_term_desc_x
	set i, [x+term_vram_curr]					; start of VRAM
	set [x+term_cursor_ptr], i					; cursor will end up at start of VRAM
	set x, pop
	set i, pop
	set pc, pop

; ---- SOL: moves cursor to start of current line
term_sol:
	set push, x
	jsr term_get_term_desc_x
	and [x+term_cursor_ptr], ~(SCREEN_COLUMNS-1)
	set x, pop
	set pc, pop

; ---- getcursorpos: returns cursor position in X. First character is at 0, last character is at (SCREEN_ROWS*SCREEN_COLUMNS-1)
term_getcursorpos:
	jsr term_get_term_desc_x
	set x, [x+term_cursor_ptr]
	sub x, [x+term_vram_curr]
	set pc, pop

; ---- setcursorpos: sets cursor position in X. First character is at 0, last character is at (SCREEN_ROWS*SCREEN_COLUMNS-1)
term_setcursorpos:
	set push, x
	set push, x
	jsr term_get_term_desc_x
1:
	ifl [sp], (SCREEN_ROWS*SCREEN_COLUMNS)
		b 1f
	jsr term_newline
	sub [sp], SCREEN_COLUMNS
	b 1b
1:
	add [sp], [x+term_vram_curr]
	set [x+term_cursor_ptr], pop
	set x, pop
	set pc, pop

; ---- newline: moves cursor to start of current line
term_newline:
	set push, i
	jsr term_get_term_desc_x
	jsr term_newline_impl
	set i, pop
	set pc, pop

; ---- newline internal implementation: assumes term handle in x; trashes i, j
term_newline_impl:
	jsr term_scroll_and_clear_if_end_impl
	set i, [x+term_cursor_ptr]
	
	and [x+term_cursor_ptr], ~(SCREEN_COLUMNS-1)
	add [x+term_cursor_ptr], SCREEN_COLUMNS	
2:
	sti [i], 0
	ifn i, [x+term_cursor_ptr]
		b 2b
	set pc, term_scroll_and_clear_if_end_impl

; ---- scroll if cursor at end of terminal
term_scroll_and_clear_if_end_impl:		
	set i, [x+term_vram_curr]
	add i, (STATUS_ROW * SCREEN_COLUMNS)
	
	ifg i, [x+term_cursor_ptr]
		set pc, pop
	; drop through
term_scroll_and_clear_impl:				
	set push, x
	jsr term_scroll_impl
	set i, [x+term_cursor_ptr]
	set x, i
	add x, SCREEN_COLUMNS
2:
	sti [i], 0
	sti [i], 0
	sti [i], 0
	sti [i], 0
	ifn i, x
		b 2b		
	set x, pop
	set pc, pop

; ---- print: prints string held between x and y
; ---- using colour in c. Preserves other registers.
; ---- control chars not treated specially, just get printed
term_print:
	ife x, y					; empty string?
		set pc, pop				; do nothing		
	set push, x
	jsr term_get_term_desc_x	; terminal descriptor
	set push, x
	set x, [sp+1]
	jsr proc_storestate			; store regs
	jsr term_print_impl			; internal implementation	
	jsr proc_restorestate		; restore regs			
	set x, pop
	set x, pop
	set pc, pop					; return

; ---- println: as print, but appends a newline
term_println:
	set push, x
	jsr term_get_term_desc_x			; terminal descriptor
	set push, x
	set x, [sp+1]
	jsr proc_storestate			; store regs	
	ifn x, y					; empty string?
		jsr term_print_impl			; internal implementation
	set x, [sp+storedstate_size]	; terminal handle
	jsr term_newline_impl
	jsr proc_restorestate		; restore regs			
	set x, pop
	set x, pop
	set pc, pop					; return

; ---- print_z: prints null-terminated string at x
; ---- using colour in c. Preserves other registers.
; ---- control chars not treated specially, just get printed
term_print_z:
	ife [x], 0			; empty?
		set pc, pop		; do nothing
	set push, y
	set y, x			; find end of string
1:
	add y, 1
	ifn [y], 0
		b 1b
		
	jsr term_print		; term_print can do the honours
	set y, pop
	set pc, pop

; ---- println_z: as print_z, but appends a newline.
term_println_z:
	ife [x], 0			; empty?
		set pc, pop		; do nothing
	set push, y
	set y, x			; find end of string
1:
	add y, 1
	ifn [y], 0
		b 1b
		
	jsr term_println	; term_println can do the honours
	set y, pop
	set pc, pop

; ----		
; ---- print internal implementation, trashes *all* registers
; ---- assumes terminal handle at [sp+storedstate_size]
term_print_impl:
	set x, [sp+storedstate_size+1]			; terminal handle
	jsr term_scroll_and_clear_if_end_impl	; need to scroll?
	
	set a, [x+term_vram_curr]
	add a, (STATUS_ROW*SCREEN_COLUMNS)	; end of printable area
	
	set i, [x+term_cursor_ptr]
	sub a, i							; available space
	
	set j, [sp+storedstate_x+1]
	set y, [sp+storedstate_y+1]
	sub y, j							; length of string we got asked to print
		
	ifl a, y							; if that's longer than available space
		set y, a						; only print that much
	
	add y, [sp+storedstate_x+1]			; end of what we can safely print
	
	set c, [sp+storedstate_c+1]			; colour
	
	ife j, y		; source empty?
		b 1f		; skip copy
9:
	set a, [j]	; fetch character
	bor a, c	; colour the character
	sti [i], a	; write it
	ifn j, y	; reached the end?
		b 9b	; go around

1:
	set [x+term_cursor_ptr], i						; new cursor position
	set [sp+storedstate_x+1], j						; note how much we've done	
	ifl [sp+storedstate_x+1], [sp+storedstate_y+1]	; more lines?
		set pc, term_print_impl						; print them
		
	set pc, pop					; done

def term_printf_buf_size	6 ; 5 decimal digits and a sign

def term_printf_locals_size 5+term_printf_buf_size; +storedstate_size
def term_printf_buf			5+storedstate_size
def term_printf_stored_x	4+storedstate_size
def term_printf_param		3+storedstate_size
def term_printf_word		2+storedstate_size
def term_printf_byte		1+storedstate_size
def term_printf_term_handle	0+storedstate_size

; ---- printf: prints packed null-terminated format buffer at x, using arguments held on stack in order from stack top down 
; ---- (note these are not popped).
; ---- ASCII control codes are interpreted in format string, but not in arguments.
term_printf:
	sub sp, term_printf_buf_size		; reserve space for formatting
	set push, x							; term_printf_stored_x
	set push, sp						; term_printf_param
	add [sp], 2+term_printf_buf_size	;	skip return address and items pushed so far
	set push, x							; term_printf_word
	set push, 0							; term_printf_byte
	
	jsr term_get_term_desc_x
	set push, x							; term_printf_term_handle
	jsr proc_storestate					; storedstate_size

term_printf_loop:
	jsr term_printf_unpack	; fetch next char in b
	set x, [sp+term_printf_term_handle]				; term handle
	ifl b, 0x20										; control code?
		set pc, [term_printf_control_handlers+b]	; handle it
	ifn b, '%'										; format code?
		set pc, term_printf_output_b				; nope, ordinary char
	
	jsr term_printf_unpack	; next char
	ifg b, ('a' - 1)
		ifl b, ('z' + 1 )
			set pc, [b + (term_printf_format_handlers - 'a')]
	ife b, 0		
		set pc, term_printf_0x00		
	; unknown code; drop through and output character verbatim.
	
term_printf_output_b:						; character in b, term handler in x
	jsr term_scroll_and_clear_if_end_impl	; scroll if necessary
	bor b, [sp+storedstate_c]				; colour
	set i, [x+term_cursor_ptr]				; cursor
	sti [i], b								; store character
	set [x+term_cursor_ptr], i				; updated cursor	
	set pc, term_printf_loop				; next character

term_printf_control_handlers:
	dat term_printf_0x00, term_printf_0x01, term_printf_0x02, term_printf_0x03, term_printf_0x04, term_printf_0x05, term_printf_0x06, term_printf_0x07
	dat term_printf_0x08, term_printf_0x09, term_printf_0x0a, term_printf_0x0b, term_printf_0x0c, term_printf_0x0d, term_printf_0x0e, term_printf_0x0f
	dat term_printf_0x10, term_printf_0x11, term_printf_0x12, term_printf_0x13, term_printf_0x14, term_printf_0x15, term_printf_0x16, term_printf_0x17
	dat term_printf_0x18, term_printf_0x19, term_printf_0x1a, term_printf_0x1b, term_printf_0x1c, term_printf_0x1d, term_printf_0x1e, term_printf_0x1f
	
term_printf_format_handlers:
	dat term_printf_code_a, term_printf_code_b, term_printf_code_c, term_printf_code_d, term_printf_code_e, term_printf_code_f, term_printf_code_g
	dat term_printf_code_h, term_printf_code_i, term_printf_code_j, term_printf_code_k, term_printf_code_l, term_printf_code_m, term_printf_code_n
	dat term_printf_code_o, term_printf_code_p, term_printf_code_q, term_printf_code_r, term_printf_code_s, term_printf_code_t, term_printf_code_u
	dat term_printf_code_v, term_printf_code_w, term_printf_code_x, term_printf_code_y, term_printf_code_z
	
; trashes a. returns next char in b.		
term_printf_unpack:
	set a, [sp+term_printf_word+1]
	set b, [a]
	set y, [sp+term_printf_byte+1]
	ife y, 0
		shr b, 8
	and b, 0x7f
	xor y, 1
	ife y, 0
		add [sp+term_printf_word+1], 1
	set [sp+term_printf_byte+1], y
	set pc, pop

term_printf_0x00:	; NUL = done
	jsr proc_restorestate			; restore regs			
	add sp, term_printf_locals_size	; drop locals
	set pc, pop						; return to caller

term_printf_0x08:	; BS
	set a, [x+term_cursor_ptr]
	and a, ~(SCREEN_COLUMNS-1)
	ifn a, [x+term_cursor_ptr]
		sub [x+term_cursor_ptr], 1
	set pc, term_printf_loop

term_printf_0x09:	; TAB
	set a, [x+term_cursor_ptr]
	set b, a
	add a, (SCREEN_COLUMNS-1)
	and a, ~(SCREEN_COLUMNS-1)
	add b, 4
	and b, ~3
	ifg b, a
		set b, a
	set [x+term_cursor_ptr], b
	set pc, term_printf_loop

term_printf_0x0a:	; LF (\n)
	set push, term_printf_loop
	set pc, term_newline_impl
	
term_printf_0x0c:	; FF (new page)
	set push, term_printf_loop
	set pc, term_clear
	
term_printf_0x0d:	; CR (no newline)
	and [x+term_cursor_ptr], ~(SCREEN_COLUMNS-1)
	set pc, term_printf_loop
	
; otherwise unhandled control chars
term_printf_0x01:	term_printf_0x02:	term_printf_0x03:	term_printf_0x04:
					term_printf_0x05:	term_printf_0x06:	term_printf_0x07:
															term_printf_0x0b:
										term_printf_0x0e:	term_printf_0x0f:
term_printf_0x10:	term_printf_0x11:	term_printf_0x12:	term_printf_0x13:
term_printf_0x14:	term_printf_0x15:	term_printf_0x16:	term_printf_0x17:
term_printf_0x18:	term_printf_0x19:	term_printf_0x1a:	term_printf_0x1b:
term_printf_0x1c:	term_printf_0x1d:	term_printf_0x1e:	term_printf_0x1f:
	set pc, term_printf_loop

term_printf_code_c:
	jsr term_scroll_and_clear_if_end_impl	; scroll if necessary
	set b, [sp+term_printf_param]
	set b, [b]
	add [sp+term_printf_param], 1
	set pc, term_printf_output_b

term_printf_code_s:		; pointer to a null-terminated one char per word string
	set b, [sp+term_printf_param]
	set b, [b]
	add [sp+term_printf_param], 1
	ife [b], 0
		set pc, term_printf_loop
	set [sp+storedstate_x], b
1:
	add b, 1
	ifn [b], 0
		b 1b
	set [sp+storedstate_y], b
	set push, term_printf_loop
	set pc, term_print_impl
		
term_printf_code_d:
	set b, [sp+term_printf_param]
	set b, [b]
	add [sp+term_printf_param], 1
	set [sp+term_printf_buf+0], '+'
	ifl b, 0x8000
		b term_printf_unsigned_b
	set [sp+term_printf_buf+0], '-'
	xor b, 0xffff
	add b, 1
	b term_printf_unsigned_b
		
term_printf_code_u:
	set b, [sp+term_printf_param]
	set b, [b]
	add [sp+term_printf_param], 1
	set [sp+term_printf_buf+0], '+'
term_printf_unsigned_b:
	set a, b
	mod a, 10
	set [sp+term_printf_buf+5], [a+format_hex_data]
	div b, 10
	set a, b
	mod a, 10
	set [sp+term_printf_buf+4], [a+format_hex_data]
	div b, 10
	set a, b
	mod a, 10
	set [sp+term_printf_buf+3], [a+format_hex_data]
	div b, 10
	set a, b
	mod a, 10
	set [sp+term_printf_buf+2], [a+format_hex_data]
	div b, 10
	set [sp+term_printf_buf+1], [b+format_hex_data]
	set a, sp
	add a, term_printf_buf
	set [sp+storedstate_x], a
	add a, 4
	set [sp+storedstate_y], a
	set push, term_printf_loop
	set pc, term_print_impl	

term_printf_code_p:
term_printf_code_x:
	set b, [sp+term_printf_param]
	set b, [b]
	add [sp+term_printf_param], 1
	set a, b
	and a, 0xF
	set [sp+term_printf_buf+3], [a+format_hex_data]
	shr b, 4
	set a, b
	and a, 0xF
	set [sp+term_printf_buf+2], [a+format_hex_data]
	shr b, 4
	set a, b
	and a, 0xF
	set [sp+term_printf_buf+1], [a+format_hex_data]
	shr b, 4
	set [sp+term_printf_buf+0], [b+format_hex_data]
	set a, sp
	add a, term_printf_buf
	set [sp+storedstate_x], a
	add a, 4
	set [sp+storedstate_y], a
	set push, term_printf_loop
	set pc, term_print_impl
	
; unhandled format chars
term_printf_code_a:	term_printf_code_b:											term_printf_code_e: term_printf_code_f: term_printf_code_g:
term_printf_code_h:	term_printf_code_i: term_printf_code_j: term_printf_code_k: term_printf_code_l: term_printf_code_m: term_printf_code_n:
term_printf_code_o:						term_printf_code_q: term_printf_code_r:						term_printf_code_t: 
term_printf_code_v:	term_printf_code_w:						term_printf_code_y: term_printf_code_z:
	set pc, term_printf_output_b	