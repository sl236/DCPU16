; ------------------
; terminal handling
; ------------------

term_return_popxy:
	set x, pop
	set y, pop
	set pc, pop

; rotate left through VTs, preserving registers
term_rotate_left:
	set push, y
	set push, x
	set x, [screen_curr_terminal]			; current terminal
	ife x, 0								; not got one?
	  set pc, term_return_popxy				; then we're done
	set y, [x+term_block_handle]			; the block handle
	set y, [y+kerntable_prev]				; previous terminal's block handle
	set y, [y+kerntable_block_start]		; its term structure
	ife y, x								; is there only one terminal?
	  set pc, term_return_popxy				; then we're done
	set [screen_curr_terminal], y			; this'll be the new terminal	
	set x, pop
	set y, pop
	set pc, term_map_current				; map it

; rotate right through VTs, preserving registers
term_rotate_right:
	set push, y
	set push, x
	set x, [screen_curr_terminal]			; current terminal
	ife x, 0								; not got one?
	  set pc, term_return_popxy				; then we're done
	set y, [x+term_block_handle]			; the block handle
	set y, [y+kerntable_next]				; previous terminal's block handle
	set y, [y+kerntable_block_start]		; its term structure
	ife y, x								; is there only one terminal?
	  set pc, term_return_popxy				; then we're done
	set [screen_curr_terminal], y			; this'll be the new terminal
	set x, pop
	set y, pop
	set pc, term_map_current				; map it
		
; map the current VT to hardware, preserving registers
term_map_current:
	set push, x
	set push, a
	set push, b
	set x, [screen_curr_terminal]			; current terminal
	set a, LEM1802_MEM_MAP_SCREEN
	set b, [x+term_vram]
	hwi [screen_device_id]
	set a, LEM1802_MEM_MAP_FONT
	set b, [x+term_charmap]
	hwi [screen_device_id]
	set a, LEM1802_MEM_MAP_PALETTE
	set b, [x+term_palette]
	hwi [screen_device_id]
	set a, LEM1802_SET_BORDER_COLOUR
	set b, [x+term_border_colour]
	hwi [screen_device_id]
	set b, pop
	set a, pop
	set x, pop
	set pc, pop

; Release the current process's terminal, trashing registers
; hardware will display another VT or turn off as appropriate if necessary
term_release:
	set x, [proclist]						; current process
	set x, [x+kerntable_block_start]		; its header
	set y, [x+kernheader_terminal_handle]	; its terminal
	ife y, 0								; don't have one?
		set pc, pop							; then we're done
	
	set [x+kernheader_terminal_handle], 0	; won't have one after we're done
	ife y, [screen_curr_terminal]			; is it being displayed?
		jsr term_rotate_left				; not any more...
	set a, LEM1802_MEM_MAP_SCREEN			; prepare to turn it off
	set b, 0
	ifn y, [screen_curr_terminal]			; and if the rotation failed, do so
		b 1f
	
	hwi [screen_device_id]
	set [screen_curr_terminal], 0

1:	
	set x, [y+term_block_handle]			; get the memory block handle
	jsr dll_delete							; remove it from the terminal list
	set pc, free							; release it, then we're done

; Allocate a terminal for the current process. Trashes registers.
; Any existing terminal is released. Then VRAM is allocated.
; The A register is also examined, and charmap and palette are allocated 
; if the appropriate term_alloc_flags are set
; The new terminal is mapped to the screen.
term_alloc:	
	set push, a							; need the argument preserved
	jsr term_release					; release current terminal, if any
	set z, pop							; get flags back
	
	set x, 0x180 + term_desc_size		; vram and descriptor
	ifb z, term_alloc_flag_charmap
		add x, 0x100
	ifb z, term_alloc_flag_palette
		add x, 0x10
	jsr malloc							; allocate memory for these
	
	set i, [x+kerntable_block_start]	; new terminal descriptor
	set b, i							; calculate vram start
	add b, term_desc_size
	sti [i], b							; record that
1:
	sti [i], 0							; most terminal descriptor entries start as zero
	ifn i, b
		b 1b
	set i, [x+kerntable_block_start]	; get terminal descriptor handle back
	set [i+term_owner], [proclist]		; fill the entries we can
	set [i+term_block_handle], x
	
	add b, 0x180						; end of VRAM
	ifc z, term_alloc_flag_charmap		; if we got a charmap and/or palette, calculate those addresses
		set pc, 1f						; otherwise skip over the calculations
	set [i+term_charmap], b
	set a, LEM1802_MEM_DUMP_FONT
	hwi [screen_device_id]
	add c, 0x100
1:
	ifc z, term_alloc_flag_palette	
		set pc, 1f
	set a, LEM1802_MEM_DUMP_PALETTE
	hwi [screen_device_id]
	set [i+term_palette], b
1:	
	set y, [screen_curr_terminal]		; current terminal
	ife y, 0							; if we don't have one, skip splicing
		set pc, 1f
	set y, [y+term_block_handle]		; its block handle
	jsr dll_splice						; insert us just before
1:
	set x, [x+kerntable_block_start]	; terminal descriptor
	set [screen_curr_terminal], x		; we become the current terminal
	set x, [x+term_vram]				; vram ptr
	set i, x							; also in i
	add x, 0x180						; end of vram
1:
	sti [i], 0							; clear VRAM
	sti [i], 0
	sti [i], 0
	sti [i], 0
	ifn i, x
		b 1b
	
	set x, [proclist]											; current process
	set x, [x+kerntable_block_start]							; its header
	set [x+kernheader_terminal_handle], [screen_curr_terminal]	; it owns this terminal
	jsr term_map_current				; map us
	set x, idleproc_table				; idle process handle
	set pc, taskswitch_to_process		; taskswitch over so it can populate the status line; on resume return to caller

; ---- println: prints string held between x and y inclusive
; ---- using colour in c, on last line before status line; Preserves other registers.
term_println:
	set push, i
	set push, j
	set push, x
	set push, y
	set push, c

	; in the shell we have these values available, but let's reacalculate them so this is reusable
	set i, [proclist]							; current process
	set i, [i+kerntable_block_start]			; its header	
	set i, [i+kernheader_terminal_handle] 		; its terminal descriptor
	set i, [i+term_vram]						; start of VRAM
  
	set j, i
	add j, SCREEN_COLUMNS               		; next row down
	set x, i
	add x, (SCREEN_COLUMNS * (STATUS_ROW-2))	; end of scroll area

1:
	sti [i], [j]  ; copy to row above
	sti [i], [j]
	sti [i], [j]
	sti [i], [j]
	sti [i], [j]
	sti [i], [j]
	sti [i], [j]
	sti [i], [j]
	ifn i, x      ; end of area?
		b 1b        ; no, go around
  
	set i, x		; bottom row
	set j, [sp+2]	; source string
	set y, [sp+1]	; end of source string
	ife j, y		; source empty?
		b 2f		; skip copy
1:
	set c, [j]	; fetch character
	bor c, [sp]	; colour it
	sti [i], c	; write it
	ifn j, y	; reached the end?
		b 1b	; go around
2:

	add x, SCREEN_COLUMNS*2	; end of next screen line
	ife i, x	; there?
		b 2f	; skip
1:
	sti [i], 0	; clear screen
	ifn i, x	; end of line?
		b 1b	; loop
2:

	set c, pop
	set y, pop
	set x, pop
	set j, pop
	set i, pop
	set pc, pop