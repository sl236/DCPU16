macro RESERVE_WORDS(_x)
  999: .org (999b+_x)
endm

; ----- kernel table format
def kerntable_next    		0
def kerntable_prev      	1
def kerntable_block_start	2
def kerntable_saved_sp     	3
def kerntable_size			(kerntable_saved_sp+1)

def kernheader_terminal_handle	0
def kernheader_identifier		1
def kernheader_size				( kernheader_identifier+1)

; ----- settings
def CLOCK_TICK_RATE			15			; clock rate is (60/CLOCK_TICK_RATE) Hz
def CURSOR_BLINK_TIME_MASK	0xFFFE		; cursor blinks when (this & time') != time
def SCREEN_ROWS     		12
def SCREEN_COLUMNS  		32
def STATUS_ROW				11

; ----- terminal descriptor
def term_vram				0
def term_charmap			1
def term_palette			2
def term_border_colour		3
def term_owner				4
def term_cursor_ptr			5
def term_cursor_mask		6
def term_cursor_tick		7
def term_waiting_keyproc	8
def term_block_handle		9
def term_desc_size			(term_block_handle+1)

def term_alloc_flag_charmap (1<<0)
def term_alloc_flag_palette (1<<1)

; ----- hardware
def LEM1802_MEM_MAP_SCREEN		0
def LEM1802_MEM_MAP_FONT		1
def LEM1802_MEM_MAP_PALETTE		2
def LEM1802_SET_BORDER_COLOUR	3
def LEM1802_MEM_DUMP_FONT		4
def LEM1802_MEM_DUMP_PALETTE	5

; ----- i/o operation data
def io_op_next			0
def io_op_result		1
def io_op_type			2
def io_op_sector_start	3
def io_op_sector_count	4
def io_op_ptr			5
def io_op_process		6
def io_op_descriptor_size (io_op_process+1)

; ----- misc
def partition_start			0
def partition_size			1
def partition_fs			2
def partition_record_size	3
def partition_magic_0		0x4D6F
def partition_magic_1		0x6F6E
def boot_sector_record_size ((partition_size*4)+2)	; 4 partition records and two words for partition magic. This is at the end of the sector, rest of sector is available for boot code.

def fstype_unused	0		; unused partition record
def fstype_tarfs	0x5441	; 'TA'	UStar file (read-only)
def fstype_kernel	0x4F53	; 'OS'	OS kernel; entire partition to be loaded by bootsector code to address 0