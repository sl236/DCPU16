; ----- Exit
; ----- Exits current process, releasing its memory and removing it from the task list
exit_impl:
  jsr term_release	  ; if we owned a terminal, free it
  iaq 1				  ; critical section
  set x, [proclist]		; [proclist] is current process (to be deleted)
  set z, [x]			; next process
  set [proclist], z		; will be current when we're done
  jsr dll_delete		; remove from the process list
  iaq 0				  ; end critical section
  
  jsr kfree			  ; release process memory
	
	; done! taskswitch to next process
  set a,    [proclist]					; next process table
  set sp,   [a + kerntable_saved_sp]	; fetch its sp
  set pc,   pop						; return there

; ----- Fork
; ----- Allocate X words of memory for a new process.
; ----- New process will have at least X words available between start of its process space and SP, but may have more.
; ----- Old process's stack will be copied to new process space.
; ----- Execution will resume in old process space for both processes, however the new process' SP will point to the new stack

fork_impl:
  add X, kernheader_size		; caller shouldn't need to take our headers into account
  set A, [proclist]       		; current process' table
  sub A, SP               		; area required for current stack
  add A, 0x20					; ensure some minimal space for ISRs, kernel calls etc
  ifg A, X                		; if the result is more than caller asked for
    set X, A              		; use that instead

  jsr kmalloc			  		; allocate process memory
  
  	; clear process header
  	set j, [x+kerntable_block_start]
  	set y, j
  	add y, kernheader_size
1:
	sti [j], 0
	ifn j, y
		b 1b
		  
  ; now we need to copy the stack over  
  set i, [proclist]   ; old stack starts at the process table
  set j, x            ; new stack starts at the new process table
  
1:
  std [j], [i]		  ; copy and decrement
  ifn i, SP           ; if we've not copied the whole stack
    b 1b              ; go around
  set [j], [i]		  ; copy last word

  set [x+kerntable_saved_sp], j ; store new process SP
  
  set Y, [proclist]   ; current process table address
  iaq 1				  ; critical section
  jsr dll_splice		; add the new process to the process list
  iaq 0				  ; end critical section
  set pc, pop         ; we're done


; ------------------------------------------------------------------------

def storedstate_size	9
def storedstate_a		8
def storedstate_b		7
def storedstate_c		6
def storedstate_x		5
def storedstate_y		4
def storedstate_z		3
def storedstate_i		2
def storedstate_j		1
def storedstate_ex		0

; stores all regs and EX to stack
proc_storestate:
	xor [sp], a		; swap return address and a
	xor a, [sp]
	xor [sp], a
	set push, b
	set push, c
	set push, x
	set push, y
	set push, z
	set push, i
	set push, j
	set push, ex
	set push, a						; store return address
	set a, [sp+storedstate_a+1]		; restore correct a value
	set pc, pop	

; restores all regs and EX from stack content created by proc_storestate
proc_restorestate:
	jsr TaskSwitch	; any time we do an operation long enough to store all registers, a taskswitch is justified
	set a, pop		; return addr
	set ex, pop		; restore other regs
	set j, pop
	set i, pop
	set z, pop
	set y, pop
	set x, pop
	set c, pop
	set b, pop
	xor [sp], a		; swap return addr and a
	xor a, [sp]
	xor [sp], a
	set pc, pop