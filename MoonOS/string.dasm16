; ----- format_hex
; places hex representation of A into four words starting at B, ORing with C
format_hex:
  set push, a 
  set push, x

  set x, a
  and x, 0xF
  set x, [x+format_hex_data]
  bor x, c
  set [b+3], x
  shr a, 4
  set x, a
  and x, 0xF
  set x, [x+format_hex_data]
  bor x, c
  set [b+2], x
  shr a, 4
  set x, a
  and x, 0xF
  set x, [x+format_hex_data]
  bor x, c
  set [b+1], x
  shr a, 4
  set a, [a+format_hex_data]
  bor a, c
  set [b], a
  
  set x, pop  
  set a, pop  
  set pc, pop
  
format_hex_data: dat "0123456789ABCDEF"

; ----- strcmp
; Compares null-terminated strings I and J. Returns 0 in A if they match, a signed value suitable for ordering otherwise
; Strings are assumed to be terminated with an entire 0 word, and either both packed or neither packed.
; I and J are advanced to terminating word, or first word that differs.
strcmp:
	ifn [i], [j]		; characters don't match?
		b strcmp_done
	ife [i], 0
		b strcmp_done
	sti pc, strcmp

strcmp_done:
	set a, [i]
	sub a, [j]
	set pc, pop

; ----- strcmp_ia
; Compares null-terminated strings I and A. Returns 0 in A if they match, a signed value suitable for ordering otherwise
; I is assumed to be one word per character; A is treated as a packed string.
; I is advanced to terminating null, or first character that differs.
strcmp_ia:
	set push, j			; preserve j
	set push, x			; and x
	set x, a
	set a, [x]
1:
	shr a, 8
	ifn [i], a			; characters don't match?
		b strcmp_ia_done
	ife [i], 0
		b strcmp_ia_done
	sti a, [x]
	and a, 0x7f
	ifn [i], a			; characters don't match?
		b strcmp_ia_done
	ife [i], 0
		b strcmp_ia_done
	add x, 1
	sti a, [x]
	b 1b

strcmp_ia_done:
	sub a, [i]
	set x, pop			; restore regs
	set j, pop
	set pc, pop			; return
